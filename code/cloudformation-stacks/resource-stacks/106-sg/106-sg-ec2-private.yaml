---
# ---------------------------------------------------------------------------------------------------
# version  1.0
# Library: https://github.com/Frankie116/my-library.git
# Creates a VPC with 2 public & 4 private subnets
# ---------------------------------------------------------------------------------------------------

# req:
# none

AWSTemplateFormatVersion: 2010-09-09
Description: This template creates a vpc with 2 public and 4 private subnets.  The code is part of a standard modular infrastructure library.


Metadata:

  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - PrivateSubnet4CIDR
      - 
        Label: 
          default: "SSH CIDR"
        Parameters: 
          - SSHLocation


Resources:

  PrivateEc2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access on ports 22/80/443 locked to relevant SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${ExportVpcStackName}-ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${ExportVpcStackName}-ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${ExportVpcStackName}-SSHSecurityGroup
      Tags:
        - Key: Name
          Value: Private Ec2 Security Group
      VpcId: !Ref VPC

  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/S public access  
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: Public HTTP/S SG
      VpcId: !Ref VPC


Outputs:

  PublicSecurityGroup:
    Description: Public HTTP/S SG
    Export:
      Name: !Sub ${AWS::StackName}-PublicSecurityGroup
    Value: !Ref PublicSecurityGroup