---
# ---------------------------------------------------------------------------------------------------
# version  1.0
# Library: https://github.com/Frankie116/my-library.git
# Creates a VPC.  The user is able to choose how many private & public subnets to create. (min 1 - max 3) each.
# ---------------------------------------------------------------------------------------------------

# req:
# none

AWSTemplateFormatVersion: 2010-09-09
Description: This template creates a vpc with 2 public and 4 private subnets.  The code is part of a standard modular infrastructure library.

## ----------------------------------------------------------------------
Metadata:

  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: ""
        Parameters: 
          - NumberOfPrivateSubnets
          - NumberOfPublicSubnets
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
      - 
        Label: 
          default: "SSH CIDR"
        Parameters: 
          - SSHLocation

## ----------------------------------------------------------------------
Parameters:

  NumberOfPrivateSubnets:
    Description: Please enter the number of Private subnets required (0-3)
    Default: 2
    Type: String

  NumberOfPublicSubnets:
    Description: Please enter the number of Public subnets required (0-3)
    Default: 2
    Type: String

  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.1.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.2.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 2
    Type: String

  PrivateSubnet3CIDR:
    Default: 10.0.3.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 3
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.101.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.102.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String

  PublicSubnet3CIDR:
    Default: 10.0.103.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 3
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

## ----------------------------------------------------------------------
Conditions:

    CreatePrivateSubnet1:
      !Or [!Equals [!Ref NumberOfPrivateSubnets, 1], !Equals [!Ref NumberOfPrivateSubnets, 2]]

    CreatePrivateSubnet2:
      !Or [!Equals [!Ref NumberOfPrivateSubnets, 2], !Equals [!Ref NumberOfPrivateSubnets, 3]]

    CreatePrivateSubnet3: 
      !Equals [!Ref NumberOfPrivateSubnets, 3]

    CreatePublicSubnet1: 
      !Or [!Equals [!Ref NumberOfPublicSubnets, 1], !Equals [!Ref NumberOfPublicSubnets, 2]]

    CreatePublicSubnet2: 
      !Or [!Equals [!Ref NumberOfPublicSubnets, 2], !Equals [!Ref NumberOfPublicSubnets, 3]]

    CreatePublicSubnet3: 
      !Equals [!Ref NumberOfPublicSubnets, 3]

## ----------------------------------------------------------------------
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Test VPC

## ----------------------------------------------------------------------
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Test IGW

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

## ----------------------------------------------------------------------
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateSubnet1
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1 | App Tier
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateSubnet2
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2 | App Tier
      VpcId: !Ref VPC

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateSubnet3
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 3 | Database Tier
      VpcId: !Ref VPC

## ----------------------------------------------------------------------
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreatePublicSubnet1
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreatePublicSubnet2
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: CreatePublicSubnet3
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 3
      VpcId: !Ref VPC

## ----------------------------------------------------------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC

## ----------------------------------------------------------------------
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

## ----------------------------------------------------------------------
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePublicSubnet2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePublicSubnet3
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
      

  
  # SSHSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: Enable SSH access
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 22
  #         ToPort: 22
  #         CidrIp: !Ref SSHLocation
  #     Tags:
  #       - Key: Name
  #         Value: SSH Security Group
  #     VpcId: !Ref VPC

  # WebServerSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: Enable access on ports 22/80/443 locked to relevant SG
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         SourceSecurityGroupId:
  #           Fn::ImportValue: !Sub ${ExportVpcStackName}-ALBSecurityGroup
  #       - IpProtocol: tcp
  #         FromPort: 443
  #         ToPort: 443
  #         SourceSecurityGroupId: !Ref ALBSecurityGroup
  #       - IpProtocol: tcp
  #         FromPort: '22'
  #         ToPort: '22'
  #         SourceSecurityGroupId: !Ref SSHSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: WebServer Security Group
  #     VpcId: !Ref VPC

  # DBSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: Open database for access
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '3306'
  #         ToPort: '3306'
  #         SourceSecurityGroupId: !Ref WebServerSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: DataBase Security Group
  #     VpcId: !Ref VPC

  # PublicSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: Enable HTTP/S public access  
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: '0.0.0.0/0'
  #       - IpProtocol: tcp
  #         FromPort: 443
  #         ToPort: 443
  #         CidrIp: '0.0.0.0/0'
  #     Tags:
  #       - Key: Name
  #         Value: Public HTTP/S SG
  #     VpcId: !Ref VPC

## ----------------------------------------------------------------------
Outputs:

  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC
    

  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1
    Condition: CreatePrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2
    Condition: CreatePrivateSubnet2

  PrivateSubnet3:
    Description: Private Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3
    Value: !Ref PrivateSubnet3
    Condition: CreatePrivateSubnet3


  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1
    Condition: CreatePublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2
    Condition: CreatePublicSubnet2

  PublicSubnet3:
    Description: Public Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3
    Value: !Ref PublicSubnet3
    Condition: CreatePublicSubnet3
  

  
  # DBSecurityGroup:
  #   Description: DataBase Security Group ID
  #   Export:
  #     Name: !Sub ${AWS::StackName}-DBSecurityGroup
  #   Value: !Ref DBSecurityGroup

  # PublicSecurityGroup:
  #   Description: Public HTTP/S SG
  #   Export:
  #     Name: !Sub ${AWS::StackName}-PublicSecurityGroup
  #   Value: !Ref PublicSecurityGroup