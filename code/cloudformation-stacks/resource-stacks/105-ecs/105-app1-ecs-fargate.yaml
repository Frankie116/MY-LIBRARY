---
# ---------------------------------------------------------------------------------------------------
# version  1.0
# Library: https://github.com/Frankie116/my-library.git
# Creates a website hosted on AWS ECS Fargate using a docker image pulled from docker.io.
# This template builds the complete infrastructure.  Modular templates are not required for this project.
# Infrastructure created with this template include the following:
# VPC, ECS Fargate, Subnets, Application Loadbalancer, Route53 DNS Zone & records, Auto Scaling Groups, Security Groups,
# ---------------------------------------------------------------------------------------------------

# req:
# 100-vpc
# 102-alb
# 102-alb-listeners
# 106-sg

AWSTemplateFormatVersion: 2010-09-09
Description: An example CloudFormation template for Fargate.


## ---------------------------------------------------------------------------------
Parameters:
  
  Image:
    Type: String
    # Update with the Docker image. 
    Default: docker.io/frankie116/lab045-docker-image

  ServiceName:
    Type: String
    # update with the name of the service
    Default: MyService

  ContainerPort:
    Type: Number
    Default: 80

  HealthCheckGracePeriod:
    Type: Number
    Default: 30

  HostedZoneName:
    Type: String
    Default: company.com

  Subdomain:
    Type: String
    Default: myservice

  # for autoscaling
  MinContainers:
    Type: Number
    Default: 2
  # for autoscaling

  MaxContainers:
    Type: Number
    Default: 10

  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 50

  ExportedVpc:
    Description: The name of the vpc stack that exports values
    Type: String
    Default: vpc

  ExportedAlb:
    Description: The name of the alb stack that exports values
    Type: String
    Default: alb

  ExportedAlbSg:
    Description: The name of the alb stack that exports values
    Type: String
    Default: app1-alb-sg

  ExportedListeners:
    Description: The name of the listeners stack that exports values
    Type: String
    Default: app1-listeners

## ---------------------------------------------------------------------------------
Resources:

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]

## ---------------------------------------------------------------------------------
  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    # DependsOn:
    #   - Fn::ImportValue: !Sub ${ExportAlb}-ListenerHTTP
    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriod
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Sub ${ExportedVpc}-PublicSubnet1
            - Fn::ImportValue: !Sub ${ExportedVpc}-PublicSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: 
            Fn::ImportValue: !Sub ${ExportedListeners}-TargetGroup

## ---------------------------------------------------------------------------------
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 256
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 0.5GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

## ---------------------------------------------------------------------------------
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId:
        Fn::ImportValue: !Sub ${ExportedVpc}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${ExportedAlbSg}-ALBSecurityGroup 

## ---------------------------------------------------------------------------------
  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # ManagedPolicyArns:
      #   -
      # Policies:
      #   -

## ---------------------------------------------------------------------------------
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ['', [!Ref HostedZoneName, .]]
      Name: !Join ['', [!Ref Subdomain, ., !Ref HostedZoneName, .]]
      Type: A
      AliasTarget:
        DNSName: 
          Fn::ImportValue: !Sub ${ExportedAlb}-AlbDnsName
        HostedZoneId: 
          Fn::ImportValue: !Sub ${ExportedAlb}-AlbZoneID

## ---------------------------------------------------------------------------------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]

## ---------------------------------------------------------------------------------
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref AutoScalingTargetValue

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

## ---------------------------------------------------------------------------------
Outputs:
  Endpoint:
    Description: Endpoint
    Value: !Join ['', ['http://', !Ref DNSRecord, ':', !Ref ContainerPort]]